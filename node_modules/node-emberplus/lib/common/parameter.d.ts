/// <reference types="node" />
import { ExtendedReader as Reader } from '../ber';
import { Element } from './element';
import { ParameterContents } from './parameter-contents';
import { TreeNode } from './tree-node';
import { QualifiedParameter } from './qualified-parameter';
import { ParameterType } from './parameter-type';
import { ParameterAccess } from './parameter-access';
import { StringIntegerCollection } from './string-integer-collection';
import { StreamDescription } from './stream/stream-description';
export interface JParameter {
    number: number;
    path: string;
    children?: Object[];
    identifier?: string;
    description?: string;
    value?: string | number | boolean | Buffer;
    minimum?: string | number | boolean | Buffer;
    maximum?: string | number | boolean | Buffer;
    access?: string;
    format?: string;
    enumeration?: string;
    factor?: number;
    isOnline?: boolean;
    formula?: string;
    step?: number;
    default?: string | number | boolean | Buffer;
    type?: string;
    streamIdentifier?: number;
    enumMap?: object;
    streamDescriptor?: object;
    schemaIdentifiers?: string;
    templateReference?: string;
}
export declare class Parameter extends Element {
    static get BERID(): number;
    get contents(): ParameterContents;
    get minimum(): string | number | boolean | Buffer | null;
    set minimum(minimum: string | number | boolean | Buffer);
    get maximum(): string | number | boolean | Buffer | null;
    set maximum(maximum: string | number | boolean | Buffer);
    get access(): ParameterAccess | null;
    set access(access: ParameterAccess);
    get format(): string | null;
    set format(format: string);
    get enumeration(): string | null;
    set enumeration(enumeration: string);
    get factor(): number | null;
    set factor(factor: number);
    get isOnline(): boolean | null;
    set isOnline(isOnline: boolean);
    get formula(): string | null;
    set formula(formula: string);
    get step(): number | null;
    set step(step: number);
    get default(): string | number | boolean | Buffer | null;
    set default(value: string | number | boolean | Buffer);
    get value(): string | number | boolean | Buffer | null;
    set value(value: string | number | boolean | Buffer);
    get streamIdentifier(): number | null;
    set streamIdentifier(streamIdentifier: number);
    get enumMap(): StringIntegerCollection | null;
    set enumMap(enumMap: StringIntegerCollection);
    get streamDescriptor(): StreamDescription | null;
    set streamDescriptor(streamDescriptor: StreamDescription);
    get schemaIdentifiers(): string | null;
    set schemaIdentifiers(schemaIdentifiers: string);
    get type(): ParameterType | null;
    set type(type: ParameterType);
    constructor(number: number, type?: ParameterType, value?: number | string | Buffer | boolean);
    static decode(ber: Reader): Parameter;
    isParameter(): boolean;
    isStream(): boolean;
    setValue(value: ParameterContents | number | string | boolean | Buffer): TreeNode;
    toQualified(): QualifiedParameter;
}
